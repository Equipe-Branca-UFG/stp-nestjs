generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  email            String            @unique
  password         String
  name             String
  role             String // Could be 'doctor', 'nurse', etc.
  transferRequests TransferRequest[]
  Doctor           Doctor[]
}

model Patient {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  medicalRecordNumber String            @unique
  currentStatus       String
  transferRequests    TransferRequest[]
}

model Hospital {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  contactInfo          String
  availableBeds        Int
  responsiblePersonnel String
  transfersFrom        TransferRequest[] @relation("fromHospital")
  transfersTo          TransferRequest[] @relation("toHospital")
}

model TransferRequest {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  patient              Patient      @relation(fields: [patientId], references: [id])
  patientId            String       @db.ObjectId
  fromHospital         Hospital     @relation("fromHospital", fields: [fromHospitalId], references: [id])
  fromHospitalId       String       @db.ObjectId
  toHospital           Hospital     @relation("toHospital", fields: [toHospitalId], references: [id])
  toHospitalId         String       @db.ObjectId
  status               String
  transportType        String
  classification       String
  departureTime        DateTime?
  estimatedArrivalTime DateTime?
  requestingDoctor     User         @relation(fields: [requestingDoctorId], references: [id])
  requestingDoctorId   String       @db.ObjectId
  reason               String
  Medication           Medication[]
  Procedure            Procedure[]
  Equipment            Equipment[]
  Document             Document[]
  Doctor               Doctor?      @relation(fields: [doctorId], references: [id])
  doctorId             String?      @db.ObjectId
}

model Medication {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  dosage                String
  administrationDetails String
  transferRequest       TransferRequest? @relation(fields: [transferRequestId], references: [id])
  transferRequestId     String?          @db.ObjectId
}

model Document {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  content           String
  type              String
  transferRequest   TransferRequest? @relation(fields: [transferRequestId], references: [id])
  transferRequestId String?          @db.ObjectId
}

model Equipment {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  transferRequest   TransferRequest? @relation(fields: [transferRequestId], references: [id])
  transferRequestId String?          @db.ObjectId
}

model Procedure {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  transferRequest   TransferRequest? @relation(fields: [transferRequestId], references: [id])
  transferRequestId String?          @db.ObjectId
}

model Doctor {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @db.ObjectId
  transferRequests TransferRequest[]
}
